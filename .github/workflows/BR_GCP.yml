name: Backup and Restore on GKE
on:
  workflow_dispatch:

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: us-central1-c
  CLUSTER_NAME: cagri-test
  NAMESPACE: test-1
  
jobs:

  gke-e2e-tests:
    name: Run B&R Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        #edition: ["os", "ee"]
        edition: ["ee"]
    env:
      IMG: hazelcast/hazelcast-platform-operator:latest-snapshot
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
      KUBECTL_VERSION: 1.22.0

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Golang
        uses: actions/setup-go@v3
        with:
          go-version: "1.16"

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install kubectl
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/bin
          echo "${GITHUB_WORKSPACE}/bin" >> ${GITHUB_PATH}
          curl -L https://dl.k8s.io/release/v${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl \
            -o ${GITHUB_WORKSPACE}/bin/kubectl
          chmod +x ${GITHUB_WORKSPACE}/bin/kubectl

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v0.7.0"
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Connect to the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.GKE_ZONE }} --project ${{ env.GCP_PROJECT_ID }}
            
#       - name: Build Image
#         if: github.event_name == 'workflow_dispatch'
#         run: |
#           IMG=ttl.sh/$(uuidgen):1h
#           echo "IMG=${IMG}" >> $GITHUB_ENV
          
#           make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
#           make docker-push IMG=$IMG
          
      - name: Deploy Operator to GKE
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          kubectl config set-context --current --namespace=$NAMESPACE

          DEPLOY_NAME=${NAME_PREFIX}controller-manager
          echo "DEPLOY_NAME=${DEPLOY_NAME}" >> $GITHUB_ENV

          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secret
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}
            
      - name: Run Hazelcast E2E tests at GKE
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}
